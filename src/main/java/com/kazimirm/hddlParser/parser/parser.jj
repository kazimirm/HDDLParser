 options {
    IGNORE_CASE = false;
    OPTIMIZE_TOKEN_MANAGER = true;
  }

  PARSER_BEGIN(ParserHDDL)
  package com.kazimirm.hddlParser.parser;

  import java.io.*;
  import java.util.*;
  import com.kazimirm.hddlParser.hddlObjects.*;

  public class ParserHDDL {

    public static void main(String[] args) throws ParseException,FileNotFoundException {

       if (args.length < 1) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
       }

        ParserHDDL parser = new ParserHDDL(new FileInputStream(args[0]));

        Domain domain = parser.start();
        System.out.println("Parse completed.");
     }
   }



  PARSER_END(ParserHDDL)

   SKIP: /* Whitespaces */
   {
     "\t"
   | "\n"
   | "\r"
   | " "
   }

  TOKEN: /* All possible valid tokens */
  {
    <LPAR:    			    "(">										/* ( */
    | <RPAR:    			")">										/* ) */
    | <LSBRA:    			"[">										/* [ */
    | <RSBRA:    			"]">										/* ] */
    | <LT:    			    "<">										/* < */
    | <GT:    			    ">">										/* > */
    | <EQ:    			    "=">										/* = */
    | <DASH:    			"-">										/* - */
    | <COLON:    			":">										/* : */
    | <QUESTIONMARK:  	    "?">										/* ? */
    | <AND:  				"and">										/* and */
    | <NOT:  				"not">										/* not */
    | <OR:  				"or">										/* or */
    | <DEFINE:    		    "define">									/* define */
    | <DOMAIN:    		    "domain">									/* domain */
    | <REQUIREMENTS:  	    "requirements">								/* requirements */
    | <TYPES:  			    "types">									/* types */
    | <CONSTANTS:  		    "constants">								/* constants */
    | <PREDICATES:  		"predicates">								/* predicates */
    | <PARAMETERS:  		"parameters">								/* parameters */
    | <TASK:  		        "task">								        /* tasks */
    | <SUBTASKS:  		    "subtasks">								    /* subtasks */
    | <METHOD:  		    "method">								    /* method */
    | <VAR:  				(["a"-"z", "A"-"Z", "0"-"9","_","-"])+>		/* variables, words, consts */
  }

////////////////////////////////////////////////////////////////////////
////////////////    ENTRY POINT      ///////////////////////////////////
////////////////////////////////////////////////////////////////////////

  Domain start():
  {
      Domain domain = new Domain();
//      Problem problem = new Problem();
  }
  {
    domain = domain()
//    | problem = problem()
    <EOF>
      {
        return domain;
      }
  }

////////////////////////////////////////////////////////////////////////
////////////////    HELP METHODS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////
  String getAttribute() :
  {
    Token attribute;
  }
  {
    attribute = <VAR>
    {
      return attribute.toString();
    }
  }
////////////////////////////////////////////////////////////////////////
////////////////    DOMAIN      ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

  Domain domain():
  {
    Domain domain = new Domain();
    List<Requirement> requirements = new ArrayList<>();
    List<Type> types = new ArrayList<>();
    List<Predicate> predicates = new ArrayList<>();
    List<Task> tasks = new ArrayList<>();
    String domainName;
  }
  {
    <LPAR> <DEFINE> <LPAR> <DOMAIN> domainName = getAttribute() <RPAR>
    requirements = getRequirements()
    types = getTypes()
    predicates = getPredicates()
    tasks = getTasks()
    {
        domain.setName(domainName);
        domain.setRequirements(requirements);
        domain.setTypes(types);
        domain.setPredicates(predicates);
        domain.setTasks(tasks);
        return domain;
    }
  }
////////////////////////////////////////////////////////////////////////
////////////////    REQUIREMENTS       /////////////////////////////////
////////////////////////////////////////////////////////////////////////

List<Requirement> getRequirements():
 {
    List<Requirement> requirements = new ArrayList<>();
    Requirement requirement;
 }
 {
    <LPAR> <COLON> <REQUIREMENTS> (requirement = getRequirement() { requirements.add(requirement);})* <RPAR>
    {
        return requirements;
    }
 }

 Requirement getRequirement():
 {
     Requirement requirement = new Requirement();
     String value;
 }
 {
     <COLON> value = getAttribute()
     {
        requirement.setValue(value);
        return requirement;
     }
 }

////////////////////////////////////////////////////////////////////////
////////////////    TYPES   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

 List<Type> getTypes():
 {
    List<Type> types = new ArrayList<>();
    Type type;
 }
 {
    <LPAR> <COLON> <TYPES> (type = getType() { types.add(type);})* <RPAR>
    {
        return types;
    }
 }

 Type getType():
 {
     Type type = new Type();
     String name;
     String baseType;
 }
 {
     name = getAttribute() <DASH> baseType = getAttribute()
     {
        type.setName(name);
        type.setBaseType(baseType);
        return type;
     }
 }

////////////////////////////////////////////////////////////////////////
////////////////    PREDICATES   ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////

  List<Predicate> getPredicates():
  {
     List<Predicate> predicates = new ArrayList<>();
     Predicate predicate;
  }
  {
     <LPAR> <COLON> <PREDICATES> (predicate = getPredicate()
                                    {
                                        predicates.add(predicate);
                                    })* <RPAR>
     {
         return predicates;
     }
  }

 Predicate getPredicate():
 {
     Predicate predicate = new Predicate();
     List<Argument> arguments = new ArrayList<>();
     Argument argument = new Argument();
     String name;
     String argumentName;
     String argumentType;
 }
 {
     <LPAR> (
                name = getAttribute()
                    (<QUESTIONMARK> argumentName = getAttribute() <DASH> argumentType = getAttribute()
                        {
                            argument.setName(argumentName);
                            argument.setType(argumentType);
                            arguments.add(argument);
                        }
                    )+
                ) <RPAR>
     {
        predicate.setName(name);
        predicate.setArguments(arguments);
        return predicate;
     }
 }
////////////////////////////////////////////////////////////////////////
////////////////    GET PARAMETERS   ///////////////////////////////////
////////////////////////////////////////////////////////////////////////
///                 Used in task/method body                         ///
////////////////////////////////////////////////////////////////////////

List<Parameter> getParameters():
 {
    List<Parameter> parameters = new ArrayList<>();
    String paramName;
    String paramType;
 }
 {
    <COLON> <PARAMETERS> <LPAR> (<QUESTIONMARK> paramName = getAttribute() <DASH> paramType = getAttribute()
    {
             Parameter parameter = new Parameter();
             parameter.setName(paramName);
             parameter.setType(paramType);
             parameters.add(parameter);
    })* <RPAR>

    {
        return parameters;
    }
 }

////////////////////////////////////////////////////////////////////////
////////////////    TASKS   ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

Task getTask():
 {
    Task task = new Task();
    List<Parameter> parameters = new ArrayList<>();
    String name;
    String paramName;
    String paramType;
 }
 {
    <LPAR> <COLON> <TASK> name = getAttribute()
        parameters = getParameters()
    <RPAR>
    {
        task.setName(name);
        task.setParameters(parameters);
        return task;
    }
 }

 List<Task> getTasks():
 {
     List<Task> tasks = new ArrayList<>();

     String name;
     List<Argument> arguments = new ArrayList<>();
 }
 {
    (
        {
            Task task = new Task();
        }
     task = getTask()
        {
            tasks.add(task);
        }
    )*
    {
        return tasks;
    }
 }

////////////////////////////////////////////////////////////////////////
////////////////    METHODS   //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

Method getMethod():
 {
    Method method = new Method();
    Task task = new Task();
    List<Parameter> methodParameters = new ArrayList<>();
    String methodName;
    String paramName;
    String paramType;
    String taskName;
 }
 {
    <LPAR> <COLON> <METHOD> methodName = getAttribute()
        methodParameters = getParameters()
        task = getTaskSignature(methodParameters)
        <COLON> <SUBTASKS> (getSubtasks())


    {
        method.setName(methodName);
        task.setParameters(methodParameters);
        task.setName(taskName);
        task.taskParameters(taskParameters);
        return task;
    }
 }

Task getTaskSignature(List<Parameter> parameters):
 {
     Task task = new Task();
     List<Parameter> taskParameters = new ArrayList<>();
 }
 {
     <COLON> <TASK> <LPAR> taskName = getAttribute() (<QUESTIONMARK> paramName = getAttribute()
     {
        for(Parameter p : parameters) {
            if(p.getName().equals(paramName)) {
                taskParameters.add(p);
            }
        }
     })* <RPAR>

    {
        task.setName(taskName);
        task.setParameters(taskParameters);
        return task;
    }
 }
