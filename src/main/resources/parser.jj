 options {
    IGNORE_CASE = false;
    OPTIMIZE_TOKEN_MANAGER = true;
  }

  PARSER_BEGIN(ParserHDDL)

  import java.io.*;
  import java.util.*;

  public class ParserHDDL {

    public static void main(String[] args) throws ParseException,FileNotFoundException {

       if (args.length < 1) {
           System.out.println("Please pass in the filename for a parameter.");
           System.exit(1);
       }

        ParserHDDL parser = new ParserHDDL(new FileInputStream(args[0]));

        parser.start();
        System.out.println("Parse completed.");
     }
   }



  PARSER_END(ParserHDDL)

   SKIP: /* Whitespaces */
   {
     "\t"
   | "\n"
   | "\r"
   | " "
   }

  TOKEN: /* All possible valid tokens */
  {
    <LPAR:    			    "(">										/* ( */
    | <RPAR:    			")">										/* ) */
    | <LSBRA:    			"[">										/* [ */
    | <RSBRA:    			"]">										/* ] */
    | <LT:    			    "<">										/* < */
    | <GT:    			    ">">										/* > */
    | <EQ:    			    "=">										/* = */
    | <DASH:    			"-">										/* - */
    | <COLON:    			":">										/* : */
    | <QUESTIONMARK:  	    "?">										/* ? */
    | <AND:  				"and">										/* and */
    | <NOT:  				"not">										/* not */
    | <OR:  				"or">										/* or */
    | <DEFINE:    		    "define">									/* define */
    | <DOMAIN:    		    "domain">									/* domain */
    | <REQUIREMENTS:  	    "requirements">								/* requirements */
    | <TYPES:  			    "types">									/* types */
    | <CONSTANTS:  		    "constants">								/* constants */
    | <PREDICATES:  		"predicates">								/* predicates */
    | <VAR:  				(["a"-"z", "A"-"Z", "0"-"9","_","-"])+>			/* variables, words, consts */
    | <ARG:  				"?"(<VAR>)>									/* argument = ?var */
  }

  void start():
  {

  }
  {
    domain()  <EOF>
  }

  Domain domain():
  {
    Domain domain = new Domain();
    List<Requirement> requirements = new ArrayList<>();
    List<Type> types = new ArrayList<>();
    List<Predicate> predicates = new ArrayList<>();
    String domainName;
  }
  {
    <LPAR> <DEFINE> <LPAR> <DOMAIN> domainName = getAttribute() <RPAR>
    requirements = getRequirements()
    types = getTypes()
    predicates = getPredicates()
    {
        domain.setName(domainName);
        domain.setRequirements(requirements);
        domain.setTypes(types);
        domain.setPredicates(predicates);
        return domain;
    }
  }


List<Requirement> getRequirements():
 {
    List<Requirement> requirements = new ArrayList<>();
    Requirement requirement;
 }
 {
    <LPAR> <COLON> <REQUIREMENTS> (requirement = getRequirement() { requirements.add(requirement);})* <RPAR>
    {
        return requirements;
    }
 }

 Requirement getRequirement():
 {
     Requirement requirement = new Requirement();
     String value;
 }
 {
     <COLON> value = getAttribute()
     {
        requirement.setValue(value);
        return requirement;
     }
 }

 List<Type> getTypes():
 {
    List<Type> types = new ArrayList<>();
    Type type;
 }
 {
    <LPAR> <COLON> <TYPES> (type = getType() { types.add(type);})* <RPAR>
    {
        return types;
    }
 }

 Type getType():
 {
     Type type = new Type();
     String name;
     String baseType;
 }
 {
     name = getAttribute() <DASH> baseType = getAttribute()
     {
        type.setName(name);
        type.setBaseType(baseType);
        return type;
     }
 }

 String getAttribute() :
 {
   Token attribute;
 }
 {
   attribute = <VAR>
   {
     return attribute.toString();
   }
 }

  List<Predicate> getPredicates():
  {
     List<Predicate> predicates = new ArrayList<>();
     Predicate predicate;
  }
  {
     <LPAR> <COLON> <PREDICATES> (predicate = getPredicate()
                                    {
                                        predicates.add(predicate);
                                    })* <RPAR>
     {
         return predicates;
     }
  }

 Predicate getPredicate():
 {
     Predicate predicate = new Predicate();
     List<Argument> arguments = new ArrayList<>();
     Argument argument = new Argument();
     String name;
     String argumentName;
     String argumentType;
 }
 {
     <LPAR> (
                name = getAttribute()
                    (argumentName = getArgument() <DASH> argumentType = getAttribute()
                        {
                            argument.setName(argumentName);
                            argument.setType(argumentType);
                            arguments.add(argument);
                        }
                    )+
                ) <RPAR>
     {
        predicate.setName(name);
        predicate.setArguments(arguments);
        return predicate;
     }
 }


 String getArgument() :
 {
   Token argument;
 }
 {
   argument = <ARG>
   {
     return argument.toString();
   }
 }

   